use base16;
use ergotree_ir::chain::address::Address;
use ergotree_ir::chain::address::AddressEncoder;
use ergotree_ir::chain::address::NetworkPrefix;
use ergotree_ir::chain::base16_bytes::Base16DecodedBytes;
use ergotree_ir::chain::base16_bytes::Base16EncodedBytes;
use ergotree_ir::ergo_tree::ErgoTree;
use ergotree_ir::mir::constant::Constant;
use ergotree_ir::mir::constant::Literal;
use ergotree_ir::mir::value::CollKind;
use ergotree_ir::mir::value::Value;
use ergotree_ir::serialization::SigmaSerializable;
use ergotree_ir::types::stype::SType;

pub(super) fn base16_to_address(base16_str: &str) -> String {
    // let base16_str = "0008cd027304abbaebe8bb3a9e963dfa9fa4964d7d001e6a1bd225eadc84048ae49b627c";
    let tree_bytes = base16::decode(base16_str.as_bytes()).unwrap();
    let tree = ErgoTree::sigma_parse_bytes(&tree_bytes).unwrap();
    let recreated = Address::recreate_from_ergo_tree(&tree).unwrap();
    let encoder = AddressEncoder::new(NetworkPrefix::Mainnet);
    encoder.address_to_str(&recreated)
}

pub(super) fn render_register_value(base16_str: &str) -> String {
    let bytes = base16::decode(base16_str.as_bytes()).unwrap();
    let cst = Constant::sigma_parse_bytes(&bytes).unwrap();
    let val = Value::from(cst.v);
    render_register_val(&val)
}
pub(super) fn render_register_val(val: &Value) -> String {
    // values.rs line 215
    match val {
        Value::Long(i) => i.to_string(),
        Value::GroupElement(e) => base16::encode_lower(&e.sigma_serialize_bytes().unwrap()),
        Value::Coll(coll) => {
            // let wrap_in_brackets = match coll.elem_tpe() {
            //     SType::SColl(_) => true,
            //     _ => false,
            // };
            // let tmp: Vec<String> = v.iter().map(|v| render_register_val(v)).collect();
            // assert_eq!(tmp.len(), 1);
            let raw_values = coll.as_vec();
            let rendered_values: Vec<String> =
                raw_values.iter().map(|v| render_register_val(v)).collect();
            let contains_bytes = match coll {
                CollKind::NativeColl(_) => true,
                CollKind::WrappedColl { elem_tpe, .. } => match elem_tpe {
                    SType::SByte => true,
                    _ => false,
                },
            };
            let contains_collection = match coll {
                CollKind::NativeColl(_) => false,
                CollKind::WrappedColl { elem_tpe, .. } => match elem_tpe {
                    SType::SColl(_) => true,
                    _ => false,
                },
            };
            let sep = match contains_bytes {
                true => "",
                false => ",",
            };
            match contains_collection {
                true => format!("[{}]", rendered_values.join(sep)),
                false => format!("{}", rendered_values.join(sep)),
            }
        }
        Value::Byte(b) => {
            let i = *b as u8;
            format!("{:02x}", i)
        }
        // Value::Byte(i) => String::from(char::from_digit(*i as u32, 16).unwrap()),
        // Value::Byte(i) => String::from(char::from_digit(*i as u32, 4).unwrap()),
        // Value::Byte(i) => String::from(*i as u8 as char),
        // Value::Byte(i) => {
        //     format!("{}_", *i as u8)
        // }
        // Literal::Coll(ck) => {
        //     let col: CollKind<i8> = ck;
        //     // format!("{:?}", Constant::sigma_parse_bytes(&ck.as_vec()).unwrap())
        //     "asd"
        // },
        // Literal::Coll(ck) => match ck {
        //     CollKind::NativeColl => {
        //         format!("{:?}", Constant::sigma_parse_bytes(ck.as_vec()).unwrap())
        //     }
        //     _ => unimplemented!(),
        // },
        _ => unimplemented!("Unhandled Value variant: {:?}", val),
    }
}

// {
//     "R4": {
//         "serializedValue": "0703553448c194fdd843c87d080f5e8ed983f5bb2807b13b45a9683bba8c7bfb5ae8",
//         "sigmaType": "SGroupElement",
//         "renderedValue": "03553448c194fdd843c87d080f5e8ed983f5bb2807b13b45a9683bba8c7bfb5ae8"
//     },
//     "R5": {
//         "serializedValue": "0e2098479c7d306cccbd653301102762d79515fa04c6f6b35056aaf2bd77a7299bb8",
//         "sigmaType": "Coll[SByte]",
//         "renderedValue": "98479c7d306cccbd653301102762d79515fa04c6f6b35056aaf2bd77a7299bb8"
//     },
//     "R6": {
//         "serializedValue": "05a4c3edd9998877",
//         "sigmaType": "SLong",
//         "renderedValue": "261824656027858"
//     }
// }

#[cfg(test)]
mod tests {
    use super::base16_to_address;
    use super::render_register_value;
    use pretty_assertions::assert_eq;

    #[test]
    fn address_from_ergo_tree() {
        let ergo_tree = "0008cd03553448c194fdd843c87d080f5e8ed983f5bb2807b13b45a9683bba8c7bfb5ae8";
        assert_eq!(
            base16_to_address(ergo_tree),
            "9h7L7sUHZk43VQC3PHtSp5ujAWcZtYmWATBH746wi75C5XHi68b"
        )
    }

    #[test]
    fn render_register_value_long() {
        let base16_str = "05a4c3edd9998877";
        assert_eq!(render_register_value(base16_str), "261824656027858")
    }

    #[test]
    fn render_register_value_group_element() {
        let base16_str = "0703553448c194fdd843c87d080f5e8ed983f5bb2807b13b45a9683bba8c7bfb5ae8";
        assert_eq!(
            render_register_value(base16_str),
            "03553448c194fdd843c87d080f5e8ed983f5bb2807b13b45a9683bba8c7bfb5ae8"
        )
    }

    #[test]
    fn render_register_value_coll_byte() {
        let base16_str = "0e2098479c7d306cccbd653301102762d79515fa04c6f6b35056aaf2bd77a7299bb8";
        assert_eq!(
            render_register_value(base16_str),
            "98479c7d306cccbd653301102762d79515fa04c6f6b35056aaf2bd77a7299bb8"
        )
    }

    #[test]
    // Coll[Coll[SByte]]
    // "1a0332537570706f72742074686520726166666c6527732055492f555820646576656c6f706d656e742c206279206d68735f73616da205417320796f752063616e20736565207468652055492f5558206f662074686973207365727669636520697320766572792062617369632e20497420697320626f74686572696e6720626f746820796f7520616e642075732e204c6574277320737461727420746869732073657276696365207769746820796f757220646f6e6174696f6e7320666f722055492f555820646576656c6f706d656e742e0a0a5765206e65656420746f207261697365203135302045524720666f72207468697320707572706f736520616e642074686520726169736564206d6f6e65792077696c6c20626520646f6e6174656420746f20636f6d6d756e697479206465767320746f206372656174652061207375697461626c6520616e64206f70656e20736f757263652055492f555820666f72207468697320736572766963652e200a0a4966207261697365642066756e64732077657265206d6f7265207468616e20313530204552472c207468652065786365737320616d6f756e742077696c6c206265207573656420666f722055492f555820616e642f6f72206f7468657220646576656c6f706d656e74732072656c6174656420746f204572676f20526166666c652e0a0a49276d206d68735f73616d2c204572676f20466f756e646174696f6e20426f617264204d656d62657220616e642074686520666f756e646572206f66204572676f20526166666c652e200a0a546869732066756e6472616973696e6720697320706572736f6e616c20616e6420666f7220746865206d656e74696f6e656420676f616c20616e6420686173206e6f7468696e6720746f20646f2077697468204572676f20466f756e646174696f6e2e0a0a596f752063616e2066696e64206d652061743a2068747470733a2f2f747769747465722e636f6d2f6d68735f73616d201eca1d77eebdb0e9096fdecb6e047ee2169e7c9aef97b0721ad96662f9504bce"
    // "[537570706f72742074686520726166666c6527732055492f555820646576656c6f706d656e742c206279206d68735f73616d,417320796f752063616e20736565207468652055492f5558206f662074686973207365727669636520697320766572792062617369632e20497420697320626f74686572696e6720626f746820796f7520616e642075732e204c6574277320737461727420746869732073657276696365207769746820796f757220646f6e6174696f6e7320666f722055492f555820646576656c6f706d656e742e0a0a5765206e65656420746f207261697365203135302045524720666f72207468697320707572706f736520616e642074686520726169736564206d6f6e65792077696c6c20626520646f6e6174656420746f20636f6d6d756e697479206465767320746f206372656174652061207375697461626c6520616e64206f70656e20736f757263652055492f555820666f72207468697320736572766963652e200a0a4966207261697365642066756e64732077657265206d6f7265207468616e20313530204552472c207468652065786365737320616d6f756e742077696c6c206265207573656420666f722055492f555820616e642f6f72206f7468657220646576656c6f706d656e74732072656c6174656420746f204572676f20526166666c652e0a0a49276d206d68735f73616d2c204572676f20466f756e646174696f6e20426f617264204d656d62657220616e642074686520666f756e646572206f66204572676f20526166666c652e200a0a546869732066756e6472616973696e6720697320706572736f6e616c20616e6420666f7220746865206d656e74696f6e656420676f616c20616e6420686173206e6f7468696e6720746f20646f2077697468204572676f20466f756e646174696f6e2e0a0a596f752063616e2066696e64206d652061743a2068747470733a2f2f747769747465722e636f6d2f6d68735f73616d,1eca1d77eebdb0e9096fdecb6e047ee2169e7c9aef97b0721ad96662f9504bce]"
    fn render_register_coll_coll_byte() {
        let base16_str = "1a0332537570706f72742074686520726166666c6527732055492f555820646576656c6f706d656e742c206279206d68735f73616da205417320796f752063616e20736565207468652055492f5558206f662074686973207365727669636520697320766572792062617369632e20497420697320626f74686572696e6720626f746820796f7520616e642075732e204c6574277320737461727420746869732073657276696365207769746820796f757220646f6e6174696f6e7320666f722055492f555820646576656c6f706d656e742e0a0a5765206e65656420746f207261697365203135302045524720666f72207468697320707572706f736520616e642074686520726169736564206d6f6e65792077696c6c20626520646f6e6174656420746f20636f6d6d756e697479206465767320746f206372656174652061207375697461626c6520616e64206f70656e20736f757263652055492f555820666f72207468697320736572766963652e200a0a4966207261697365642066756e64732077657265206d6f7265207468616e20313530204552472c207468652065786365737320616d6f756e742077696c6c206265207573656420666f722055492f555820616e642f6f72206f7468657220646576656c6f706d656e74732072656c6174656420746f204572676f20526166666c652e0a0a49276d206d68735f73616d2c204572676f20466f756e646174696f6e20426f617264204d656d62657220616e642074686520666f756e646572206f66204572676f20526166666c652e200a0a546869732066756e6472616973696e6720697320706572736f6e616c20616e6420666f7220746865206d656e74696f6e656420676f616c20616e6420686173206e6f7468696e6720746f20646f2077697468204572676f20466f756e646174696f6e2e0a0a596f752063616e2066696e64206d652061743a2068747470733a2f2f747769747465722e636f6d2f6d68735f73616d201eca1d77eebdb0e9096fdecb6e047ee2169e7c9aef97b0721ad96662f9504bce";
        assert_eq!(
            render_register_value(base16_str),
            "[537570706f72742074686520726166666c6527732055492f555820646576656c6f706d656e742c206279206d68735f73616d,417320796f752063616e20736565207468652055492f5558206f662074686973207365727669636520697320766572792062617369632e20497420697320626f74686572696e6720626f746820796f7520616e642075732e204c6574277320737461727420746869732073657276696365207769746820796f757220646f6e6174696f6e7320666f722055492f555820646576656c6f706d656e742e0a0a5765206e65656420746f207261697365203135302045524720666f72207468697320707572706f736520616e642074686520726169736564206d6f6e65792077696c6c20626520646f6e6174656420746f20636f6d6d756e697479206465767320746f206372656174652061207375697461626c6520616e64206f70656e20736f757263652055492f555820666f72207468697320736572766963652e200a0a4966207261697365642066756e64732077657265206d6f7265207468616e20313530204552472c207468652065786365737320616d6f756e742077696c6c206265207573656420666f722055492f555820616e642f6f72206f7468657220646576656c6f706d656e74732072656c6174656420746f204572676f20526166666c652e0a0a49276d206d68735f73616d2c204572676f20466f756e646174696f6e20426f617264204d656d62657220616e642074686520666f756e646572206f66204572676f20526166666c652e200a0a546869732066756e6472616973696e6720697320706572736f6e616c20616e6420666f7220746865206d656e74696f6e656420676f616c20616e6420686173206e6f7468696e6720746f20646f2077697468204572676f20466f756e646174696f6e2e0a0a596f752063616e2066696e64206d652061743a2068747470733a2f2f747769747465722e636f6d2f6d68735f73616d,1eca1d77eebdb0e9096fdecb6e047ee2169e7c9aef97b0721ad96662f9504bce]"
        )
    }
}
